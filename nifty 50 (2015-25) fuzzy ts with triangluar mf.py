# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wG8ySlWZWrIiyqxhzPieTRPjbg7yIfXm
"""

import pandas as pd
import matplotlib.pyplot as plt

# 1. Load and clean data
df = pd.read_csv('/content/NIFTY 50_daily_data.csv')

# 2. Convert dates (ONCE is enough)
# Correct format including time
df['date'] = pd.to_datetime(df['date'], format='%d-%m-%Y %H:%M')  # For "DD-MM-YYYY HH:MM" format
# Filter for the last 10 years
end_date = df['date'].max()
start_date = end_date - pd.DateOffset(years=10)
df = df[(df['date'] >= start_date) & (df['date'] <= end_date)]





df

# Plot the closing prices
plt.figure(figsize=(12, 6))
plt.plot(df['date'], df['close'], label='NIFTY 50 Close Price')
plt.title('NIFTY 50 Closing Prices - Last 10 Years')
plt.xlabel('date')
plt.ylabel('Closing Price')
plt.legend()
plt.grid(True)
plt.show()

# defining the universe of  discourse

data_min=df['close'].min()
data_max=df['close'].max()
margin=0.1*(data_max-data_min)

u_max=data_max+margin
u_min=data_min-margin


u=[u_min,u_max]

# partitioning the universe into intervals

num_intervals=30
interval_width=(u_max-u_min)/num_intervals

intervals=[]

for i in range(num_intervals):
  lower=u_min+i*interval_width
  upper=lower+interval_width
  intervals.append((lower,upper))

intervals

# creating triangular membership fucntions

def triangular_membership(x,a,b,c):
  if x<=a or x>=c:
    return 0
  elif a<x<b :
    return (x-a)/(b-a)
  elif b<=x<c  :
    return (c-x)/(c-b)
  else:
    return 0


fuzzy_sets = {}
for i in range(num_intervals):
    if i == 0:
        a = intervals[i][0]
        b = intervals[i][0]
        c = intervals[i][1]
    elif i == num_intervals - 1:
        a = intervals[i][0]
        b = intervals[i][1]
        c = intervals[i][1]
    else:
        a = intervals[i - 1][0] + interval_width
        b = intervals[i][0] + interval_width / 2
        c = intervals[i][1]
    fuzzy_sets[f'F{i+1}'] = (a, b, c)


fuzzy_sets

# fuzzify historical data

def fuzzify(value):
  membership={}
  for labels ,(a,b,c) in fuzzy_sets.items():
    membership[labels]=triangular_membership(value,a,b,c)
  return max(membership,key=membership.get)

df['fuzzy']=df['close'].apply(fuzzify)

df

# creating flrs
flrs=[]

for i in range(1,len(df)):
  prev=df.iloc[i-1]['fuzzy']
  curr=df.iloc[i]['fuzzy']
  if prev and curr:
    flrs.append((prev,curr))

# creating flrgs

flrgs={}

for prev,curr in flrs:
  if prev in flrgs:
    if curr not in flrgs[prev]:
      flrgs[prev].append(curr)
  else:
    flrgs[prev]=[curr]


print('fuzzy logical relationship groups ')


for prev , curr in flrgs.items():
  print(f"{prev} -> {','.join(curr)}")

df['fuzzy'].value_counts()

# defuzzyfying via centroid of triangle

def get_centroid(label):
  a,b,c=fuzzy_sets[label]
  return (a+b+c)/3

# forecasting
import  numpy as np
forecasts=[]


for i in range(1,len(df)):
  prev_fuzzy=df.iloc[i-1]['fuzzy']
  if prev_fuzzy in flrgs:
    curr=flrgs[prev_fuzzy]
    centroid=[get_centroid(label) for label in curr]
    forecast=np.mean(centroid)

  else:
    forecast=get_centroid(prev_fuzzy)
  forecasts.append(forecast)

#  Align forecasts with dates

forecast_dates=df['date'][1:].reset_index(drop=True)
forecast_df=pd.DataFrame({'date':forecast_dates,'forecast':forecasts})


# merge with original data

df_forecast=pd.merge(df,forecast_df,on='date',how='left')

df_forecast

# 11. Evaluate model performance

from sklearn.metrics import mean_absolute_error, mean_squared_error

df_eval = df_forecast.dropna(subset=['forecast'])
y_true = df_eval['close']
y_pred = df_eval['forecast']

mae = mean_absolute_error(y_true, y_pred)
mse = mean_squared_error(y_true, y_pred)
rmse = np.sqrt(mse)

print(f"MAE: {mae:.2f}")
print(f"MSE: {mse:.2f}")
print(f"RMSE: {rmse:.2f}")

# 12. Plot actual vs forecast
plt.figure(figsize=(14, 6))
plt.plot(df_eval['date'], df_eval['close'], label='Actual Close')
plt.plot(df_eval['date'], df_eval['forecast'], label='Fuzzy Forecast')
plt.title('Fuzzy Time Series Forecast vs Actual - NIFTY 50')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
